package com.example.appbookinghotel.model

import com.example.appbookinghotel.utils.SendEmail
import com.example.core.api.RetrofitInstance
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext

class ForgotPasswordRepository {
    private lateinit var userKey : String
    private lateinit var otp : String
    suspend fun verifyEmailAndSendOtp(email: String): Result<String>
    {
        return withContext (Dispatchers.IO) {
            try {
                otp = randomOTP()

                val getUser = RetrofitInstance.api.getUser()
                val isEmailExists = getUser.entries.find { it.value.email == email }

                if (isEmailExists == null) {
                    return@withContext Result.failure(Exception("Email kh√¥ng t·ªìn t·∫°i"))
                }
                userKey = isEmailExists.key
                val SENDER_EMAIL = "appzingmp3@gmail.com"
                val SENDER_PASSWORD  = "kcyl ogdk csup lhoi"

                val gmail = SendEmail(SENDER_EMAIL, SENDER_PASSWORD)
                gmail.set_to(arrayOf(email))
                gmail.set_subject("üîê M√£ x√°c minh t√†i kho·∫£n Booking Hotel c·ªßa b·∫°n")

                val emailBody = """
                  üéµ Xin ch√†o,  
                
                  B·∫°n v·ª´a y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u cho t√†i kho·∫£n Zing MP3.  
                  ƒê√¢y l√† m√£ x√°c minh c·ªßa b·∫°n:  
                
                  ${otp}  
                
                  H√£y nh·∫≠p m√£ n√†y v√†o ·ª©ng d·ª•ng ƒë·ªÉ ti·∫øp t·ª•c qu√° tr√¨nh ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u.  
                  N·∫øu b·∫°n kh√¥ng y√™u c·∫ßu thao t√°c n√†y, vui l√≤ng b·ªè qua email n√†y.  
                
                  Ch√∫c b·∫°n c√≥ tr·∫£i nghi·ªám tuy·ªát v·ªùi c√πng Zing MP3! üé∂  
                
                  Tr√¢n tr·ªçng,  
                  ƒê·ªôi ng≈© Zing MP3    
                  """
                    .trimIndent()

                gmail.setBody(emailBody)

                val isSuccess = gmail.send()

                if (!isSuccess)
                {
                    return@withContext Result.failure(Exception("G·ª≠i OTP th·∫•t b·∫°i"))
                }
                return@withContext Result.success(otp)
            } catch (e: Exception) {
                return@withContext Result.failure(e)
            }
        }
    }
    suspend fun checkOTP(inputOTP : String) : Result<String>
    {
        return withContext (Dispatchers.IO) {
            if (inputOTP == otp)
            {
                return@withContext Result.success(otp)
            }
            return@withContext Result.failure(Exception("B·∫°n nh·∫≠p OTP sai"))
        }
    }
    suspend fun changePassword(password : String) : Result<String>
    {
        return withContext (Dispatchers.IO) {
            try {
                val map = mapOf(
                    "password" to password
                )
                val response = RetrofitInstance.api.forgotPassword(userKey, map)

                if (response.isSuccessful) {
                    return@withContext Result.success(userKey)
                } else {
                    return@withContext Result.failure(Exception("Thay ƒë·ªïi m·∫≠t kh·∫©u th·∫•t b·∫°i"))
                }
            } catch (e: Exception) {
                return@withContext Result.failure(e)
            }
        }
    }
    private fun randomOTP() : String{
        return (10000..99999).random().toString()
    }
}